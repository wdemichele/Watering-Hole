<img style="position: relative; top: 40px; left: 80px; cursor: pointer" class="left" src="/assets/backbutton.svg" onclick="history.back()">

<div class="flex-containerx center flex-container-small" style="width:100%;margin-top:5rem;">    
    <div class="databoxx secondary" style="flex:2;padding:1rem;">
        <h1>Your Favourites</h1>
        <div class="databox primary">
            <div class="scroll">
                {{#each favourites}}
                    <div class="databox tertiary fav-res">
                        <a href="/search/bar{{this.id}}"><h2>{{this.name}}</h2>
                        <h3>{{this.address}}</h3></a>
                        {{!-- <h5 style="cursor: pointer;" onclick="center({{this.location.lat}}, {{this.location.long}})"><em>Center on map</em></h5> --}}
                    </div>
                {{/each}}
            </div>
        </div>
    </div>
    <div class="databoxx secondary map-area-small" style="">
        <textarea style="display: none;" id ="tourstops">{{stringTourStopsFav}}</textarea>
        <input type="hidden" id="lat" value="{{lat}}">
        <input type="hidden" id="long" value="{{long}}">
        <input type="hidden" id="zoom" value="{{zoom}}">
        <div class="center map-small" style="width:97%;margin-top:6%;height: 1300px;" id="map"></div>
    </div>
</div>
    <!-- 
     The `defer` attribute causes the callback to execute after the full HTML
     document has been parsed. For non-blocking uses, avoiding race conditions,
     and consistent behavior across browsers, consider loading using Promises
     with https://www.npmjs.com/package/@googlemaps/js-api-loader.
    -->
    <script
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA8P18svM3ddTHDUV21aw8JGCcfwN0UGjw&callback=initMap&libraries=marker&v=beta"
      defer
    ></script>


<script type="text/javascript">


function initMap() {
    let lat = parseFloat(document.getElementById("lat").value)
    let long = parseFloat(document.getElementById("long").value)
    let zoom = parseFloat(document.getElementById("zoom").value)
    const map = new google.maps.Map(document.getElementById("map"), {
        zoom: zoom,
        center: { lat: lat, lng: long },
        mapId: "4504f8b37365c3d0",
    });

    let jsonTourStopsFav = JSON.parse(document.getElementById("tourstops").value);

    for (let location of jsonTourStopsFav) {
        loc = location
        loc.position.lat = parseFloat(location.position.lat);
        loc.position.lng = parseFloat(location.position.lng);
    }

    console.log(jsonTourStopsFav)

    const tourStops = jsonTourStopsFav
    // Create an info window to share between markers.
    const infoWindow = new google.maps.InfoWindow();

    // Create the markers.
    tourStops.forEach(({ position, title }, i) => {
        const pinView = new google.maps.marker.PinView();
        const marker = new google.maps.marker.AdvancedMarkerView({
        position,
        map,
        {{!-- content: pinView.element, --}}
        title: `${title}`,
        
        });

        // Add a click listener for each marker, and set up the info window.
        marker.addListener("click", ({ domEvent, latLng }) => {
        const { target } = domEvent;

        infoWindow.close();
        infoWindow.setContent(marker.title);
        infoWindow.open(marker.map, marker);
        });
    });
    }

    window.initMap = initMap;
    console.log(map)
    function center(lat, lng){
        var latLng = {"lat": lat, "lng": lng}; // returns LatLng object
        console.log(map)
        map.setCenter(new google.maps.LatLng(lat, lng));
    }
</script>